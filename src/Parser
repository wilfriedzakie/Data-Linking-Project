package dataLink;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.traversal.DocumentTraversal;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.NodeIterator;
import org.xml.sax.SAXException;
/*
 *** @author Wafa DJERAD 
 */
public class Parser {

	public static void main(String[] args) throws IOException, SAXException,
			ParserConfigurationException {
		args = new String[] { "C:/Users/dell/Downloads/PR-1/person1/dataset11_dataset12_goldstandard_person.xml" };
		// "C:/Users/dell/Desktop/result" };

		
		ArrayList<String> ent1 = new ArrayList<String>();
		ArrayList<String> ent2 = new ArrayList<String>();


		try (Writer out = new OutputStreamWriter(new FileOutputStream(
				"C:/Users/dell/Downloads/PR-1/goldStand.tsv"), "UTF-8")) {

			File fXmlFile = new File(args[0]);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(fXmlFile);

			doc.getDocumentElement().normalize();

			DocumentTraversal traversal = (DocumentTraversal) doc;
			NodeIterator iterator = traversal.createNodeIterator(
					doc.getDocumentElement(), NodeFilter.SHOW_ELEMENT, null,
					true);

			NodeList nList = doc.getElementsByTagName("entity1");

			boolean finished = false;

			int count = 0;
			int count2 = 0;

			for (Node n = iterator.nextNode(); n != null; n = iterator
					.nextNode()) {

				for (int i = 0; i < nList.getLength() && !finished; i++) {

					if (count == nList.getLength()
							&& count2 == nList.getLength()) {
						finished = true;
						break;
					}

					String s = "";
					if (n.getNodeName() == "entity1") {

						count++;

						Node entity1 = doc.getElementsByTagName("entity1")
								.item(i);

						NamedNodeMap attr = entity1.getAttributes();
						Node nodeAttr = attr.getNamedItem("rdf:resource");
					
						String[] entKey = nodeAttr.toString().split("=");

						s = entKey[1].trim().replaceAll("\"", "");
						//System.out.println(s);
						ent1.add(s);

					}
					String s2 = "";
					if (n.getNodeName() == "entity2") {

						count2++;
						Node entity2 = doc.getElementsByTagName("entity2")
								.item(i);

						NamedNodeMap attr2 = entity2.getAttributes();
						Node nodeAttr2 = attr2.getNamedItem("rdf:resource");
					

						String[] entKey2 = nodeAttr2.toString().split("=");

						s2 = entKey2[1].trim().replaceAll("\"", "");
						//System.out.println(s2);
						ent2.add(s2);
					}
				
				}

			}
			
			for (int j =0; j<ent1.size(); j++)
			//System.out.println(ent1.get(j) + "--->"+ ent2.get(j));
			
			out.write(ent1.get(j) + " ---> "+ ent2.get(j) + "\n");

		}

	}
}

